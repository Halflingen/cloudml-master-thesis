{ 'AWS::EC2::SecurityGroup': 
   { SecurityGroupIngress: 
      { required: 'No',
        notes: 'List of EC2 Security Group Rule type.',
        type: 'EC2 Security Group Rule Property' },
     GroupDescription: 
      { required: 'Yes',
        notes: 'Description of the security group.',
        type: 'String' } },
  AutoScaling: 
   { DeviceName: 
      { required: 'Yes',
        notes: 'The name of the device within Amazon EC2.',
        type: 'String' },
     VirtualName: 
      { required: 'Conditional',
        notes: 'The name of the virtual device. The name must be in the form ephemeralX where X is a number starting from 0, for example, ephemeral0. If you specify the VirtualName property, do not specify the Ebs property.',
        type: 'String' },
     SnapshotId: 
      { required: 'Conditional',
        notes: 'The Snapshot ID of the volume to use. If you specify SnapshotId, do not specify VolumeSize.',
        type: 'String' },
     VolumeSize: 
      { required: 'Conditional',
        notes: 'The volume size, in GigiBytes. If you specify VolumeSize, do not specify SnapshotId.',
        type: 'String' },
     Ebs: 
      { required: 'Conditional',
        notes: 'The information for the Elastic Block Store volume. If you specify the Ebs property, do not specify the VirtualName property.',
        type: 'Block Device Template type' } },
  Route: 
   { DNSName: 
      { required: 'Yes',
        notes: 'The DNS name of the Load Balancer that is the target of the alias. You can specify this property using the GetAtt intrinsic function to get the CanonicalHostedZoneName property for the LoadBalancer resource you want.',
        type: 'String' },
     HostedZoneId: 
      { required: 'Yes',
        notes: 'The hosted zone name ID of the Load Balancer that is the target of the alias. You can specify this property using the GetAtt intrinsic function to get the CanonicalHostedZoneNameID property for the LoadBalancer resource you want.',
        type: 'String' } },
  'AWS::SNS::Topic': 
   { Subscription: 
      { required: 'Yes',
        notes: 'List of SNS Subscription type.',
        type: 'CommaDelimitedList' } },
  SNS: 
   { Endpoint: 
      { required: 'Yes',
        notes: 'The subscription\'s endpoint (format depends on the protocol).',
        type: 'String' },
     Protocol: 
      { required: 'Yes',
        notes: 'The subscription\'s protocol.',
        type: 'String' } },
  'AWS::ElasticBeanstalk::Application': 
   { ApplicationVersions: 
      { required: 'Yes',
        notes: 'Application versions associated with this application. An application version is a specific, labeled iteration of deployable code.',
        type: 'List of ApplicationVersion types' },
     ConfigurationTemplates: 
      { required: 'No',
        notes: 'Configuration templates associated with this application. You can use templates to deploy different versions of an application using the configuration settings defined in the template.',
        type: 'List of ConfigurationTemplate' } },
  'AWS::ElasticBeanstalk::Environment': 
   { 'Application Name': 
      { required: 'Yes',
        notes: 'The name of the application associated with this environment.',
        type: 'String' },
     CNAMEPrefix: 
      { required: 'no',
        notes: 'The URL to the CNAME for this environment.',
        type: 'String' },
     OptionsToRemove: 
      { required: 'No',
        notes: 'The option settings to remove.',
        type: 'Option Setting type' },
     TemplateName: 
      { required: 'No',
        notes: 'Name of the template to use with the environment.',
        type: 'String' },
     OptionSettings: 
      { required: 'No',
        notes: 'The option settings to add.',
        type: 'Option Setting type' },
     'Solution StackName': 
      { required: 'No',
        notes: 'Stack name associated with the environment.',
        type: 'String' },
     VersionLabel: 
      { required: 'No',
        notes: 'Version to associate with the environment',
        type: 'String' } },
  S3: 
   { IndexDocument: 
      { required: 'No',
        notes: 'The name of the index document. For more information, see Index Document Support.',
        type: 'String' },
     ErrorDocument: 
      { required: 'No',
        notes: 'The name of the error document. For more information, see Custom Error Document Support.',
        type: 'String' } },
  'AWS::EC2::Instance': 
   { ImageId: 
      { required: 'Yes',
        notes: 'Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration.',
        type: 'String' },
     RamDiskId: 
      { required: 'No',
        notes: 'The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information on whether you need to specify a RAM disk. To find kernel requirements, refer to the AWS Resource Center and search for the kernel ID.',
        type: 'String' },
     PrivateIpAddress: 
      { required: 'No',
        notes: 'If you\'re using Amazon Virtual Private Cloud, you can optionally use this parameter to assign the instance a specific available IP address from the subnet (e.g., 10.0.0.25). Default: Amazon VPC selects an IP address from the subnet for the instance.',
        type: 'String' },
     DisableApiTermination: 
      { required: 'No',
        notes: 'Boolean indicating whether the instance can be terminated through the API.',
        type: 'String' },
     KeyName: 
      { required: 'No',
        notes: 'Provides the name of the EC2 key pair.',
        type: 'String' },
     KernelId: 
      { required: 'No',
        notes: 'The kernel ID',
        type: 'String' },
     SecurityGroupIds: 
      { required: 'No',
        notes: 'Required for VPC security groups. A list containing the security group IDs for VPC security groups to assign to the Amazon EC2 instance.',
        type: 'Comma Delimited list' },
     PlacementGroupName: 
      { required: 'No',
        notes: 'The name of an existing placement group you want to launch the intstance into (for cluster instances).',
        type: 'String' },
     Monitoring: 
      { required: 'No',
        notes: 'Whether monitoring is enabled for the instance.',
        type: 'String' },
     Volumes: 
      { required: 'No',
        notes: 'The EBS volumes to attach to the instance.',
        type: 'List of EC2 MountPoint types' },
     InstanceType: 
      { required: 'No',
        notes: 'The instance type (for example, m1.small).',
        type: 'String' },
     UserData: 
      { required: 'No',
        notes: 'Base64-encoded MIME user data made available to the instances.',
        type: 'String' },
     AvailabilityZone: 
      { required: 'No',
        notes: 'Specifies the name of the Availability Zone the instance is located in.',
        type: 'String' },
     SubnetId: 
      { required: 'No',
        notes: 'If you\'re using Amazon Virtual Private Cloud, this specifies the ID of the subnet you want to launch the instance into.',
        type: 'String' },
     Tags: 
      { required: 'No',
        notes: 'The tags you want to attach to the instance.',
        type: 'List of EC2 Tags type' },
     SecurityGroups: 
      { required: 'No',
        notes: 'Valid only for EC2 security groups. A list containing the EC2 security groups to assign to the Amazon EC2 instance. The list can contain both the name of existing EC2 security groups or references to AWS::EC2::SecurityGroup resources created in the template.',
        type: 'Comma Delimited list' } },
  'AWS::EC2::EIP': 
   { InstanceId: 
      { required: 'No',
        notes: 'Instance ID of the Amazon EC2 instance that you want to associate with this Elastic IP address.',
        type: 'String' } },
  'AWS::AutoScaling::AutoScalingGroup': 
   { AvailabilityZones: 
      { required: 'Yes',
        notes: 'Contains a list of Availability Zones for the group.',
        type: 'List of String' },
     HealthCheckGracePeriod: 
      { required: 'No',
        notes: 'Length of time in seconds after a new EC2 instance comes into service that Auto Scaling starts checking its health.',
        type: 'Integer' },
     LoadBalancerNames: 
      { required: 'No',
        notes: 'A list of load balancers associated with this Auto Scaling group.',
        type: 'List of String' },
     MaxSize: 
      { required: 'Yes',
        notes: 'The maximum size of the Auto Scaling group.',
        type: 'String' },
     LaunchConfigurationName: 
      { required: 'Yes',
        notes: 'Specifies the name of the associated AWS::AutoScaling::LaunchConfiguration.',
        type: 'String' },
     DesiredCapacity: 
      { required: 'No',
        notes: 'Specifies the desired capacity for the Auto Scaling group.',
        type: 'String' },
     HealthCheckType: 
      { required: 'No',
        notes: 'The service you want the health status from, Amazon EC2 or Elastic Load Balancer. Valid values are "EC2" or "ELB."',
        type: 'String' },
     MinSize: 
      { required: 'Yes',
        notes: 'The minimum size of the Auto Scaling group.',
        type: 'String' },
     Cooldown: 
      { required: 'No',
        notes: 'The number of seconds after a scaling activity completes before any further scaling activities can start.',
        type: 'String' },
     NotificationConfiguration: 
      { required: 'No',
        notes: 'An embedded property that configures an Auto Scaling group to send notifications when specified events take place.',
        type: 'NotificationConfiguration type' } },
  'AWS::EC2::VolumeAttachment': 
   { Device: 
      { required: 'Yes',
        notes: 'How the device is exposed to the instance (e.g., /dev/sdh, or xvdh).',
        type: 'String' },
     InstanceId: 
      { required: 'Yes',
        notes: 'The ID of the instance to which the volume attaches. This value can be a reference to an AWS::EC2::Instance resource, or it can be the instance ID of an existing EC2 instance.',
        type: 'String' },
     VolumeId: 
      { required: 'Yes',
        notes: 'The ID of the Amazon EBS volume. The volume and instance must be within the same Availability Zone. This value can be a reference to an AWS::EC2::Volume resource, or it can be the volume ID of an existing Amazon EBS volume.',
        type: 'String' } },
  'AWS::SDB::Domain': {},
  Auto: 
   { TopicARN: 
      { required: 'Yes',
        notes: 'The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic.',
        type: 'String' },
     NotificationTypes: 
      { required: 'Yes',
        notes: 'The type of events that will trigger the notification. A list of events that will trigger the notification, which can include any or all of the following: autoscaling: EC2_INSTANCE_LAUNCH, autoscaling:EC2_INSTANCE_LAUNCH_ERROR, autoscaling:EC2_INSTANCE_TERMINATE, autoscaling:EC2_INSTANCE_TERMINATE_ERROR, and autoscaling:TEST_NOTIFICATION. For more information on event types, see DescribeAutoScalingNotificationTypes.',
        type: 'String list' } },
  CloudFormation: {},
  'AWS::EC2::Volume': 
   { AvailabilityZone: 
      { required: 'Yes',
        notes: 'The Availability Zone in which to create the new volume.',
        type: 'String' },
     Tags: 
      { required: 'No',
        notes: 'The tags you want to attach to the volume.',
        type: 'List of EC2 Tags type' },
     Size: 
      { required: 'Conditional',
        notes: 'The size of the volume, in GiBs. If you specify Size, do not specify SnapshotId.',
        type: 'String' },
     SnapshotId: 
      { required: 'Conditional',
        notes: 'The snapshot from which to create the new volume. If you specify SnapshotId, do not specify Size.',
        type: 'String' } },
  'AWS::AutoScaling::ScalingPolicy': 
   { ScalingAdjustment: 
      { required: 'Yes',
        notes: 'The number of instances by which to scale. AdjustmentType determines the interpretation of this number (e.g., as an absolute number or as a percentage of the existing Auto Scaling group size). A positive increment adds to the current capacity and a negative value removes from the current capacity.',
        type: 'String' },
     AutoScalingGroupName: 
      { required: 'Yes',
        notes: 'The name or Amazon Resource Name (ARN) of the Auto Scaling Group that you want to attach the policy to.',
        type: 'String' },
     AdjustmentType: 
      { required: 'Yes',
        notes: 'Specifies whether the ScalingAdjustment is an absolute number or a percentage of the current capacity. Valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.',
        type: 'String' },
     Cooldown: 
      { required: 'No',
        notes: 'The amount of time, in seconds, after a scaling activity completes before any further trigger-related scaling activities can start.',
        type: 'String' } },
  'AWS::CloudFormation::Stack': 
   { Parameters: 
      { required: 'Conditional',
        notes: 'The set of parameters passed to AWS CloudFormation when this embedded stack is created.',
        type: 'Parameters type' },
     TemplateURL: 
      { required: 'Yes',
        notes: 'The URL of a template that specifies the stack that you want to create as a resource.',
        type: 'String' },
     TimeoutInMinutes: 
      { required: 'No',
        notes: 'The length of time, in minutes, that AWS CloudFormation waits for the embedded stack to reach the CREATE_COMPLETE state. The default is no timeout. When AWS CloudFormation detects that the embedded stack has reached the CREATE_COMPLETE state, it marks the embedded stack resource as CREATE_COMPLETE in the parent stack and resumes creating the parent stack. If the timeout period expires before the embedded stack reaches CREATE_COMPLETE, AWS CloudFormation marks the embedded stack as failed and rolls back both the embedded stack and parent stack.',
        type: 'String' } },
  'AWS::CloudWatch::Alarm': 
   { EvaluationPeriods: 
      { required: 'Yes',
        notes: 'The number of periods over which data is compared to the specified threshold.',
        type: 'String' },
     AlarmActions: 
      { required: 'No',
        notes: 'The list of actions to execute when this alarm transitions into an ALARM state from any other state. Each action is specified as an Amazon Resource Number (ARN). Currently the only action supported is publishing to an Amazon SNS topic or an Amazon Auto Scaling policy.',
        type: 'List of String' },
     Statistic: 
      { required: 'Yes',
        notes: 'The statistic to apply to the alarm\'s associated metric. Valid Values: SampleCount | Average | Sum | Minimum | Maximum',
        type: 'String' },
     InsufficientDataActions: 
      { required: 'No',
        notes: 'The list of actions to execute when this alarm transitions into an INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Number (ARN). Currently the only action supported is publishing to an Amazon SNS topic or an Amazon Auto Scaling policy.',
        type: 'List of String' },
     OKActions: 
      { required: 'No',
        notes: 'The list of actions to execute when this alarm transitions into an OK state from any other state. Each action is specified as an Amazon Resource Number (ARN). Currently the only action supported is publishing to an Amazon SNS topic or an Amazon Auto Scaling policy.',
        type: 'List of String' },
     Threshold: 
      { required: 'Yes',
        notes: 'The value against which the specified statistic is compared.',
        type: 'String' },
     MetricName: 
      { required: 'Yes',
        notes: 'The name for the alarm\'s associated metric.',
        type: 'String' },
     Dimensions: 
      { required: 'No',
        notes: 'The dimensions for the alarm\'s associated metric.',
        type: 'List of Metric Dimension type' },
     Period: 
      { required: 'Yes',
        notes: 'The period in seconds over which the specified statistic is applied.',
        type: 'String' },
     ComparisonOperator: 
      { required: 'Yes',
        notes: 'The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Valid Values: GreaterThanOrEqualToThreshold | GreaterThanThreshold | LessThanThreshold | LessThanOrEqualToThreshold',
        type: 'String' },
     Namespace: 
      { required: 'Yes',
        notes: 'The namespace for the alarm\'s associated metric.',
        type: 'String' },
     AlarmDescription: 
      { required: 'No',
        notes: 'The description for the alarm.',
        type: 'String' },
     ActionsEnabled: 
      { required: 'No',
        notes: 'Indicates whether or not actions should be executed during any changes to the alarm\'s state. Either true or false.',
        type: 'String' },
     Unit: 
      { required: 'No',
        notes: 'The unit for the alarm\'s associated metric. Valid Values: Seconds | Microseconds | Milliseconds | Bytes | Kilobytes | Megabytes | Gigabytes | Terabytes | Bits | Kilobits | Megabits | Gigabits | Terabits | Percent | Count | Bytes/Second | Kilobytes/Second | Megabytes/Second | Gigabytes/Second | Terabytes/Second | Bits/Second | Kilobits/Second | Megabits/Second | Gigabits/Second | Terabits/Second | Count/Second | None',
        type: 'String' } },
  'AWS::CloudFormation::WaitCondition': 
   { Timeout: 
      { required: 'Yes',
        notes: 'The length of time (in seconds) to wait for the number of signals that the Count property specifies.',
        type: 'String' },
     Count: 
      { required: 'No',
        notes: 'The number of success signals that AWS CloudFormation must receive before it continues the stack creation process. When the wait condition receives requisite the number of success signals, AWS CloudFormation resumes creating the stack. If the wait condition does not receive the specified number of success signals before the Timeout period expires, AWS CloudFormation assumes the wait condition has failed and rolls the stack back.',
        type: 'String' },
     Handle: 
      { required: 'Yes',
        notes: 'A reference to the wait condition handle used to signal this wait condition. Use the Ref intrinsic function to specify an AWS::CloudFormation::WaitConditionHandle resource.',
        type: 'Reference' } },
  'AWS::S3::Bucket': 
   { WebsiteConfiguration: 
      { required: 'No',
        notes: 'Information used to configure the bucket as a static website. For more information, see Hosting Websites on Amazon S3.',
        type: 'Website Configuration Type' },
     AccessControl: 
      { required: 'No',
        notes: 'A canned ACL that grants predefined permissions on the bucket. Default is Private. For more information about canned ACLs, see Canned ACLs in the Amazon S3 documentation. Valid values for AccessControl: Private | PublicRead | PublicReadWrite | AuthenticatedRead | BucketOwnerRead | BucketOwnerFullControl',
        type: 'String' } },
  'AWS::CloudFront::Distribution': 
   { 'DistributionConfig type': 
      { required: 'Yes',
        notes: 'The distribution\'s configuration information.',
        type: 'String' } },
  'AWS::SQS::Queue': 
   { VisibilityTimeout: 
      { required: 'No',
        notes: 'An integer from 0 to 43200 (12 hours). Determines the length of time the message will be available.',
        type: 'String' } },
  'AWS::Route53::RecordSetGroup': 
   { Comment: 
      { required: 'No',
        notes: 'Any comments you want to include about the hosted zone.',
        type: 'String' },
     HostedZoneName: 
      { required: 'Conditional',
        notes: 'The name of the domain for the hosted zone where you want to add the record set. Condition: You must specify either the HostedZoneName or HostedZoneId, but you cannot specify both. When you create a stack using a AWS::Route53::RecordSetGroup that specifies HostedZoneName, AWS CloudFormation attempts to find a hosted zone whose name matches the HostedZoneName. If AWS CloudFormation cannot find a hosted zone with a matching domain name or if there is more than one hosted zone with the specified domain name, AWS CloudFormation will not create the stack. If you have multiple hosted zones with the same domain name, you must explicitly specify the hosted zone using the HostedZoneId.',
        type: 'String' },
     RecordSets: 
      { required: 'Yes',
        notes: 'List of resource record sets to add.',
        type: 'AWS::Route53::RecordSet Type list' },
     HostedZoneId: 
      { required: 'Conditional',
        notes: 'The ID of the hosted zone. Condition: You must specify either the HostedZoneName or HostedZoneId, but you cannot specify both.',
        type: 'String' } },
  'AWS::CloudFormation::WaitConditionHandle': {},
  CloudFront: 
   { HTTPSPort: 
      { required: 'No',
        notes: 'The HTTPS port the custom origin listens on.',
        type: 'String' },
     HTTPPort: 
      { required: 'No',
        notes: 'The HTTP port the custom origin listens on.',
        type: 'String' },
     CustomOrigin: 
      { required: 'Conditional',
        notes: 'Origin information to specify a custom origin. You cannot use S3Origin and CustomOrigin in the same distribution.',
        type: 'CustomOrigin type' },
     OriginProtocolPolicy: 
      { required: 'Yes',
        notes: 'The origin protocol policy to apply to your origin.',
        type: 'String' },
     S3Origin: 
      { required: 'Conditional',
        notes: 'Origin information to specify an Amazon S3 origin. You cannot use S3Origin and CustomOrigin in the same distribution.',
        type: 'S3Origin type' },
     DNSName: 
      { required: 'Yes',
        notes: 'The origin to associate with the distribution.',
        type: 'String' },
     Bucket: 
      { required: 'No',
        notes: 'The Amazon S3 bucket to store the access logs in.',
        type: 'String' },
     TrustedSigners: 
      { required: 'No',
        notes: 'Any AWS accounts permitted to create signed URLs for private content. If the distribution uses signed URLs, include this property. Specify the AWS Account ID to give another AWS account permission to create signed URLs.  To give your own AWS account permission to create signed URLs, you must specify your AWS Account ID (you cannot use Self to specify your AWS Account ID). Separate items in the list with commas.',
        type: 'String list' },
     CNAMEs: 
      { required: 'No',
        notes: 'A list of CNAME aliases to associate with this distribution. Separate items in the list with commas.',
        type: 'String list' },
     Enabled: 
      { required: 'Yes',
        notes: 'Controls whether the distribution is enabled to accept end user requests for content.',
        type: 'Boolean' },
     RequiredProtocols: 
      { required: 'No',
        notes: 'The protocols required for the distribution. Use this property to restrict access to your distribution solely to HTTPS requests.',
        type: 'String list' },
     Comment: 
      { required: 'No',
        notes: 'Any comments you want to include about the distribution.',
        type: 'String' },
     DefaultRootObject: 
      { required: 'No',
        notes: 'The default root object for the distribution.',
        type: 'String' },
     Prefix: 
      { required: 'No',
        notes: 'An optional string you define to prefix to the access log file names for this distribution.',
        type: 'String' },
     Logging: 
      { required: 'No',
        notes: 'Controls whether access logs are written for the distribution. To turn on access logs, include this property.',
        type: 'Logging type' },
     OriginAccessIdentity: 
      { required: 'No',
        notes: 'The CloudFront origin access identity to associate with the distribution. If the distribution serves private content, include this property.',
        type: 'String' } },
  ElasticLoadBalancing: 
   { PolicyName: 
      { required: 'Yes',
        notes: 'The name of the policy being created. The name must be unique within the set of policies for this Load Balancer.',
        type: 'String' },
     'TCP is the default, specified as a TCP: port pair—for example, "TCP:5000". In this case a healthcheck simply attempts to open a TCP connection to the instance on the specified port. Failure to connect within the configured timeout is considered unhealthy.For HTTP, the situation is different. HTTP is specified as a HTTP:port;/;PathToPing; grouping—for example, "HTTP:80/weather/us/wa/seattle". In this case, a HTTP GET request is issued to the instance on the given port and path. Any answer other than "200 OK" within the timeout period is considered unhealthy.The total length of the HTTP ping target needs to be 1024 16-bit Unicode characters or fewer.': {},
     PolicyNames: 
      { required: 'No',
        notes: 'List of policies to be associated with the listener. Currently, this list can have at most one policy.',
        type: 'List of AppCookieStickinessPolicy and LBCookieStickinessPolicy' },
     CookieName: 
      { required: 'Yes',
        notes: 'Name of the application cookie used for stickiness.',
        type: 'String' },
     CookieExpirationPeriod: 
      { required: 'No',
        notes: 'The time period in seconds after which the cookie should be considered stale. Not specifying this parameter indicates that the sticky session will last for the duration of the browser session.',
        type: 'String' },
     InstancePort: 
      { required: 'Yes',
        notes: 'Specifies the TCP port on which the instance server is listening. This property cannot be modified for the life of the LoadBalancer.',
        type: 'String' },
     LoadBalancerPort: 
      { required: 'Yes',
        notes: 'Specifies the external LoadBalancer port number. This property cannot be modified for the life of the LoadBalancer.',
        type: 'String' },
     Interval: 
      { required: 'Yes',
        notes: 'Specifies the approximate interval, in seconds, between health checks of an individual instance.',
        type: 'String' },
     Target: 
      { required: 'Yes',
        notes: 'Specifies the instance being checked. The protocol is either TCP or HTTP. The range of valid ports is 1 through 65535. NoteTCP is the default, specified as a TCP: port pair—for example, "TCP:5000". In this case a healthcheck simply attempts to open a TCP connection to the instance on the specified port. Failure to connect within the configured timeout is considered unhealthy.For HTTP, the situation is different. HTTP is specified as a HTTP:port;/;PathToPing; grouping—for example, "HTTP:80/weather/us/wa/seattle". In this case, a HTTP GET request is issued to the instance on the given port and path. Any answer other than "200 OK" within the timeout period is considered unhealthy.The total length of the HTTP ping target needs to be 1024 16-bit Unicode characters or fewer.',
        type: 'String' },
     SSLCertificateId: 
      { required: 'No',
        notes: 'The ARN of the SSL certificate to use. For more information on SSL certificates, see Managing Server Certificates in the AWS Identity and Access Management documentation.',
        type: 'String' },
     UnhealthyThreshold: 
      { required: 'Yes',
        notes: 'Specifies the number of consecutive health probe failures required before moving the instance to the Unhealthy state.',
        type: 'String' },
     '': {},
     Protocol: 
      { required: 'Yes',
        notes: 'Specifies the LoadBalancer transport protocol to use for routing — TCP or HTTP. This property cannot be modified for the life of the LoadBalancer.',
        type: 'String' },
     Timeout: 
      { required: 'Yes',
        notes: 'Specifies the amount of time, in seconds, during which no response means a failed health probe. This value must be less than the value for Interval.',
        type: 'String' },
     HealthyThreshold: 
      { required: 'Yes',
        notes: 'Specifies the number of consecutive health probe successes required before moving the instance to the Healthy state.',
        type: 'String' } },
  'AWS::Route53::RecordSet': 
   { AliasTarget: 
      { required: 'Yes, if you are creating an alias resource record set.',
        notes: 'Alias resource record sets only: Information about the domain to which you are redirecting traffic. For more information on alias resource record sets, see Creating Alias Resource Record Sets in the Route 53 Developer Guide. NoteCurrently, Amazon Route 53 supports aliases only for Elastic Load Balancing.',
        type: 'AliasTarget type' },
     Type: 
      { required: 'Yes',
        notes: 'The type of records to add. Valid Values: A | AAAA | CNAME | MX | NS | PTR | SOA | SPF | SRV | TXT',
        type: 'String' },
     'Currently, Amazon Route 53 supports aliases only for Elastic Load Balancing.': {},
     TTL: 
      { required: 'Yes',
        notes: 'The resource record cache time to live (TTL), in seconds.',
        type: 'String' },
     ResourceRecords: 
      { required: 'Yes',
        notes: 'List of resource records to add. Each record should be in the format appropriate for the record type specified by the Type property. For information about different record types and their record formats, see Appendix: Domain Name Format in the Amazon Route 53 Developer Guide.',
        type: 'String list' },
     Comment: 
      { required: 'No',
        notes: 'Any comments you want to include about the hosted zone.',
        type: 'String' },
     Weight: 
      { required: 'Yes, if you are creating a weighted resource record set.',
        notes: 'Weighted resource record sets only: Among resource record sets that have the same combination of DNS name and type, a value that determines what portion of traffic for the current resource record set is routed to the associated location. For more information on alias resource record sets, see Setting Up Weighted Resource Record Sets in the Route 53 Developer Guide.',
        type: 'Integer' },
     HostedZoneId: 
      { required: 'Conditional',
        notes: 'The ID of the hosted zone. Condition: You must specify either the HostedZoneName or HostedZoneId, but you cannot specify both.',
        type: 'String' },
     SetIdentifier: 
      { required: 'Yes, if you are creating a weighted resource record set.',
        notes: 'Weighted resource record sets only: An identifier that differentiates among multiple resource record sets that have the same combination of DNS name and type. Must be unique among resource record sets that have the same combination of DNS name and type.',
        type: 'String' },
     HostedZoneName: 
      { required: 'Conditional',
        notes: 'The name of the domain for the hosted zone where you want to add the record set. Condition: You must specify either the HostedZoneName or HostedZoneId, but you cannot specify both. When you create a stack using a AWS::Route53::RecordSet that specifies HostedZoneName, AWS CloudFormation attempts to find a hosted zone whose name matches the HostedZoneName. If AWS CloudFormation cannot find a hosted zone with a matching domain name or if there is more than one hosted zone with the specified domain name, AWS CloudFormation will not create the stack. If you have multiple hosted zones with the same domain name, you must explicitly specify the hosted zone using the HostedZoneId.',
        type: 'String' },
     '': {},
     Name: 
      { required: 'Yes',
        notes: 'The name of the domain. This must be a fully-specified domain, ending with a period as the last label indication. If you omit the final period, Amazon Route 53 assumes the domain is relative to the root.',
        type: 'String' } },
  CloudWatch: 
   { Name: 
      { required: 'Yes',
        notes: 'Name of the dimension.',
        type: 'String' },
     Value: 
      { required: 'Yes',
        notes: 'The value representing the dimension measurement.',
        type: 'String' } },
  'AWS::AutoScaling::LaunchConfiguration': 
   { SecurityGroups: 
      { required: 'No',
        notes: 'A list containing the EC2 security groups to assign to the Amazon EC2 instances in the Auto Scaling group. The list can contain the name of existing EC2 security groups or references to AWS::EC2::SecurityGroup resources created in the template or both.',
        type: 'Comma Delimited List' },
     KernelId: 
      { required: 'No',
        notes: 'Provides the ID of the kernel associated with the EC2 AMI.',
        type: 'String' },
     RamDiskId: 
      { required: 'No',
        notes: 'The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information on whether you need to specify a RAM disk. To find kernel requirements, refer to the AWS Resource Center and search for the kernel ID.',
        type: 'String' },
     ImageId: 
      { required: 'Yes',
        notes: 'Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration.',
        type: 'String' },
     KeyName: 
      { required: 'No',
        notes: 'Provides the name of the EC2 key pair.',
        type: 'String' },
     UserData: 
      { required: 'No',
        notes: 'The user data available to the launched EC2 instances.',
        type: 'String' },
     InstanceType: 
      { required: 'Yes',
        notes: 'Specifies the instance type of the EC2 instance.',
        type: 'String' },
     BlockDeviceMappings: 
      { required: 'No',
        notes: 'Specifies how block devices are exposed to the instance. You can specify virtual devices and EBS volumes.',
        type: 'List of BlockDeviceMapping types' } },
  'AWS::AutoScaling::Trigger': 
   { LowerBreachScaleIncrement: 
      { required: 'Conditional',
        notes: 'The incremental amount to use when performing scaling activities when the lower threshold has been breached. Must be a negative or positive integer, or integer percentage value.',
        type: 'String' },
     Unit: 
      { required: 'No',
        notes: 'The standard unit associated with a measure, used by the trigger when fetching the metric statistics it uses to determine when to activate.',
        type: 'String' },
     UpperBreachScaleIncrement: 
      { required: 'Conditional',
        notes: 'The incremental amount to use when performing scaling activities when the upper threshold has been breached. Must be a negative or positive integer, or integer percentage value.',
        type: 'String' },
     Period: 
      { required: 'Yes',
        notes: 'The period used in retrieving metric statistics used by the trigger to determine when to fire.',
        type: 'String' },
     Dimensions: 
      { required: 'Yes',
        notes: 'The dimensions used to retrieve metric statistics that the trigger uses to determine when to fire.',
        type: 'List of CloudWatch Dimension type' },
     Namespace: 
      { required: 'Yes',
        notes: 'The namespace used by the trigger to determine when to fire.',
        type: 'String' },
     Statistic: 
      { required: 'Yes',
        notes: 'The statistic used by the trigger to determine which metric statistics to examine.',
        type: 'String' },
     LowerThreshold: 
      { required: 'Yes',
        notes: 'The lower limit for the metric. The trigger fires if all data points in the last BreachDuration seconds exceed the upper threshold or fall below the lower threshold.',
        type: 'String' },
     AutoScalingGroupName: 
      { required: 'Yes',
        notes: 'Name of Auto Scaling group.',
        type: 'String' },
     BreachDuration: 
      { required: 'Yes',
        notes: 'The amount of time to wait while the trigger is firing before performing scaling activities in response to the breach.',
        type: 'String' },
     UpperThreshold: 
      { required: 'Yes',
        notes: 'The upper limit of the metric used. The trigger fires if all data points in the last BreachDuration seconds exceed the upper threshold or fall below the lower threshold.',
        type: 'String' },
     MetricName: 
      { required: 'Yes',
        notes: 'The metric name used by the trigger to determine when to fire.',
        type: 'String' } },
  'AWS::ElasticLoadBalancing::LoadBalancer': 
   { AvailabilityZones: 
      { required: 'Yes',
        notes: 'The Availability Zones in which to create the load balancer.',
        type: 'List of Strings' },
     Instances: 
      { required: 'No',
        notes: 'Provides a list of EC2 instance IDs for the LoadBalancer.',
        type: 'List of String' },
     Listeners: 
      { required: 'No',
        notes: 'ElasticLoadBalancing Listener Property.',
        type: 'List of Listener types' },
     LBCookieStickinessPolicy: 
      { required: 'No',
        notes: 'List of LBCookieStickinessPolicy type.',
        type: 'LBCookieStickinessPolicy type.' },
     HealthCheck: 
      { required: 'No',
        notes: 'ElasticLoadBalancing HealthCheck Property.',
        type: 'HealthCheck type.' },
     AppCookieStickinessPolicy: 
      { required: 'No',
        notes: 'List of AppCookieStickinessPolicy type.',
        type: 'AppCookieStickinessPolicy type.' } },
  'AWS::EC2::SecurityGroupIngress': 
   { FromPort: 
      { required: 'Yes',
        notes: 'Start of port range for the TCP and UDP protocols, or an ICMP type number. An ICMP type number of -1 indicates a wildcard (i.e., any ICMP type number).',
        type: 'String' },
     CidrIp: 
      { required: 'Conditional',
        notes: 'If you specify SourceSecurityGroupName, do not specify CidrIp.',
        type: 'String' },
     SourceSecurityGroupName: 
      { required: 'Conditional',
        notes: 'Specifies the name of the Amazon EC2 Security Group to allow access or uses the Ref intrinsic function to refer to the logical name of a security group defined in the same template. If you specify CidrIp, do not specify SourceSecurityGroupName.',
        type: 'String' },
     ToPort: 
      { required: 'Yes',
        notes: 'End of port range for the TCP and UDP protocols, or an ICMP code. An ICMP code of -1 indicates a wildcard (i.e., any ICMP code).',
        type: 'String' },
     IpProtocol: 
      { required: 'Required',
        notes: 'IP protocol name or number. For valid values, see the IpProtocol parameter in AuthorizeSecurityGroupIngress',
        type: 'String' },
     SourceSecurityGroupOwnerId: 
      { required: 'Conditional',
        notes: 'Specifies the AWS Account ID of the owner of the Amazon EC2 Security Group specified in the SourceSecurityGroupName property. If you specify SourceSecurityGroupName and that security group is owned by a different account than the account creating the stack, you must specify the SourceSecurityGroupOwnerId; otherwise, this property is optional.',
        type: 'String' },
     GroupName: 
      { required: 'Yes',
        notes: 'Name of the Amazon EC2 Security Group to add an ingress rule. This value can be a reference to an AWS::EC2::SecurityGroup resource or the name of an existing EC2 security group.',
        type: 'String' } },
  'AWS::RDS::DBInstance': 
   { MasterUserPassword: 
      { required: 'Yes',
        notes: 'The master password for the DB Instance.',
        type: 'String' },
     LicenseModel: 
      { required: 'No',
        notes: 'License model information for this DB Instance.',
        type: 'String' },
     DBInstanceClass: 
      { required: 'Yes',
        notes: 'The name of the compute and memory capacity class of the DB Instance.',
        type: 'String' },
     PreferredBackupWindow: 
      { required: 'No',
        notes: 'The daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod.',
        type: 'String' },
     DBSnapshotIdentifier: 
      { required: 'No',
        notes: 'The identifier for the DB Snapshot to restore from. By specifying this property, you can create a DB Instance from the specified DB snapshot. If the DBSnapshotIdentifier property is an empty string or the AWS::RDS::DBInstance declaration has no DBSnapshotIdentifier property, the database is created as a new database. If the property contains a value (other than empty string), AWS CloudFormation creates a database from the specified snapshot. If no snapshot exists with the specified name, the database creation fails and the stack rolls back.',
        type: 'String' },
     MultiAZ: 
      { required: 'No',
        notes: 'Specifies if the DB Instance is a Multi-AZ deployment. You cannot set the AvailabilityZone parameter if the MultiAZ parameter is set to true.',
        type: 'Boolean' },
     MasterUsername: 
      { required: 'Yes',
        notes: 'The master username for the DB Instance.',
        type: 'String' },
     EngineVersion: 
      { required: 'No',
        notes: 'The version number of the database engine to use.',
        type: 'String' },
     DBParameterGroupName: 
      { required: 'No',
        notes: 'The name of the DB Parameter Group.',
        type: 'String' },
     Engine: 
      { required: 'Yes',
        notes: 'The name of the database engine to be used for this DB Instance.',
        type: 'String' },
     Port: 
      { required: 'No',
        notes: 'The port for the instance.',
        type: 'String' },
     AvailabilityZone: 
      { required: 'No',
        notes: 'The name of the Availability Zone where the DB Instance is. You cannot set the AvailabilityZone parameter if the MultiAZ parameter is set to true.',
        type: 'String' },
     DBSecurityGroups: 
      { required: 'No',
        notes: 'A list containing the DB Security Groups to assign to the Amazon RDS instance. The list can contain both the name of existing DB Security Groups or references to AWS::RDS::DBSecurityGroup resources created in the template.',
        type: 'CommaDelimitedList' },
     AllocatedStorage: 
      { required: 'Yes',
        notes: 'The allocated storage size specified in gigabytes.',
        type: 'String' },
     DBName: 
      { required: 'No',
        notes: 'The name of the initial database of this instance that was provided at create time, if one was specified when the DB Instance was created. This same name is returned for the life of the DB Instance.',
        type: 'String' },
     PreferredMaintenanceWindow: 
      { required: 'No',
        notes: 'The weekly time range (in UTC) during which system maintenance can occur.',
        type: 'String' },
     BackupRetentionPeriod: 
      { required: 'No',
        notes: 'The number of days for which automatic DB Snapshots are retained.',
        type: 'String' } },
  ElasticBeanstalk: 
   { S3Key: 
      { required: 'No',
        notes: 'The Amazon S3 key where the data is located.',
        type: 'Source Bundle' },
     TemplateName: 
      { required: 'Yes',
        notes: 'The name of the configuration template.',
        type: 'String' },
     OptionName: 
      { required: 'Yes',
        notes: 'The name of the configuration option.',
        type: 'String' },
     SourceBundle: 
      { required: 'No',
        notes: 'The location where the source bundle is located for this version.',
        type: 'Source Bundle' },
     VersionLabel: 
      { required: 'Yes',
        notes: 'A label uniquely identifying the version for the associated application.',
        type: 'String' },
     OptionSettings: 
      { required: 'No',
        notes: 'The option settings to add.',
        type: 'Option Setting type' },
     S3Bucket: 
      { required: 'Yes',
        notes: 'The Amazon S3 bucket where the data is located.',
        type: 'String' },
     Value: 
      { required: 'Yes',
        notes: 'Value of the setting.',
        type: 'String' },
     NameSpace: 
      { required: 'Yes',
        notes: 'A unique namespace identifying the option\'s associated AWS resource.',
        type: 'String' } },
  'AWS::EC2::EIPAssociation': 
   { InstanceId: 
      { required: 'Yes',
        notes: 'Instance ID of the Amazon EC2 instance that you want to associate with the Elastic IP address specified by the EIP property.',
        type: 'String' },
     EIP: 
      { required: 'Conditional',
        notes: 'Elastic IP address that you want to associate with the Amazon EC2 instance specified by the InstanceId property. You can specify an existing Elastic IP address or a reference to an Elastic IP address allocated with a AWS::EC2::EIP resource. This property must not be specified if the AllocationId property is specified.',
        type: 'String' },
     AllocationId: 
      { required: 'Conditional',
        notes: 'Allocation ID for the VPC Elastic IP address you want to associate with an Amazon EC2 instance in your VPC. This property must not be specified if the EIP property is specified.',
        type: 'String' } },
  EC2: 
   { Device: 
      { required: 'Yes',
        notes: 'How the device is exposed to the instance (such as /dev/sdh, or xvdh).',
        type: 'String' },
     FromPort: 
      { required: 'Yes',
        notes: 'Start of port range for the TCP and UDP protocols, or an ICMP type number. An ICMP type number of -1 indicates a wildcard (i.e., any ICMP type number).',
        type: 'String' },
     CidrIp: 
      { required: 'Conditional',
        notes: 'If you specify SourceSecurityGroupName, do not specify CidrIp.',
        type: 'String' },
     Key: 
      { required: 'Yes',
        notes: 'The key name of the tag.',
        type: 'String' },
     SourceSecurityGroupName: 
      { required: 'Conditional',
        notes: 'Specifies the name of the Amazon EC2 Security Group to allow access or uses the Ref intrinsic function to refer to the logical name of a security group defined in the same template. If you specify CidrIp, do not specify SourceSecurityGroupName.',
        type: 'String' },
     ToPort: 
      { required: 'Yes',
        notes: 'End of port range for the TCP and UDP protocols, or an ICMP code. An ICMP code of -1 indicates a wildcard (i.e., any ICMP code).',
        type: 'String' },
     IpProtocol: 
      { required: 'Required',
        notes: 'IP protocol name or number. For valid values, see the IpProtocol parameter in AuthorizeSecurityGroupIngress',
        type: 'String' },
     VolumeId: 
      { required: 'Yes',
        notes: 'The ID of the Amazon EBS volume. The volume and instance must be within the same Availability Zone and the instance must be running.',
        type: 'String' },
     SourceSecurityGroupOwnerId: 
      { required: 'Conditional',
        notes: 'Specifies the AWS Account ID of the owner of the Amazon EC2 Security Group specified in the SourceSecurityGroupName property. If you specify SourceSecurityGroupName and that security group is owned by a different account than the account creating the stack, you must specify the SourceSecurityGroupOwnerId; otherwise, this property is optional.',
        type: 'String' },
     Value: 
      { required: 'Yes',
        notes: 'The value for the tag.',
        type: 'String' } },
  'AWS::RDS::DBSecurityGroup': 
   { DBSecurityGroupIngress: 
      { required: 'Yes',
        notes: 'Network ingress authorization for an Amazon EC2 security group or an IP address range. See RDS Security Group Rule Property.',
        type: 'RDS Security Group Rule type' },
     GroupDescription: 
      { required: 'Yes',
        notes: 'Description of the security group.',
        type: 'String' } },
  RDS: 
   { EC2SecurityGroupOwnerId: 
      { required: 'Conditional',
        notes: 'Specifies the AWS Account ID of the owner of the EC2 security group specified in the EC2SecurityGroupName property. This property must be specified together with the EC2SecurityGroupName. This property must not be specified if the CIDRIP property is specified.',
        type: 'String' },
     CIDRIP: 
      { required: 'Conditional',
        notes: 'The IP range to allow access. This property must not be specified if the EC2SecurityGroupName and EC2SecurityGroupOwnerId properties are specified.',
        type: 'String' },
     EC2SecurityGroupName: 
      { required: 'Conditional',
        notes: 'The name of the EC2 Security Group to allow access. This property must be specified together with the EC2SecurityGroupOwnerId. This property must not be specified if the CIDRIP property is specified.',
        type: 'String' } } }
undefined
